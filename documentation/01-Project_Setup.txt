
AetherSchedule - Documentation: Project Setup & Workflow
=========================================================

This document provides a comprehensive guide to setting up and running the AetherSchedule project locally. It covers the project structure, environment configuration, and available scripts.

---
### 1. Project Folder Structure
---

The project is organized into a monorepo-style structure within a single repository, separating the frontend, backend, database, and core logic into distinct directories.

- **/api/**: Contains the Hono backend server.
  - `server.ts`: The main Hono application file where all API routes and logic are defined.
  - `index.ts`: The entrypoint for deploying the Hono app to a serverless environment like Vercel Edge.
  - `seedData.ts`: Defines the initial dataset used to seed a fresh database.

- **/core/**: The "brains" of the application. This contains the core, non-framework-specific business logic.
  - `schedulerEngine.ts`: The high-level orchestrator for the AI timetable generation process.
  - **/engine/**: A sub-directory containing the refactored, modular components of the scheduler engine (fitness calculation, genetic operators, Gemini integration, etc.).
  - `conflictChecker.ts`: A class that validates a timetable grid against all hard constraints.
  - `analyticsEngine.ts`: Logic for generating detailed reports from a completed timetable.
  - `substituteFinder.ts`: Logic for finding and ranking suitable substitute teachers.

- **/db/**: Contains all database-related files.
  - `schema.ts`: Drizzle ORM schema definitions. This file is the single source of truth for the database structure.
  - `index.ts`: Initializes and exports the Drizzle client instance for use in the API.

- **/drizzle/**: Auto-generated by Drizzle Kit. Contains migration files. You should not edit these files manually.

- **/src/**: The React frontend application.
  - **/components/**: Reusable React components used across the application (e.g., `GlassPanel`, `DataTable`).
  - **/context/**: React Context providers for global state management (`AppContext`, `ToastContext`).
  - **/hooks/**: Custom React hooks for shared logic (`useAppContext`, `useUndoRedo`).
  - **/pages/**: Top-level components, each representing a full page/view of the application.
  - **/services/**: The API layer for the frontend, containing functions that call the backend API.
  - `App.tsx`: The root component that handles routing and layout.
  - `index.tsx`: The entrypoint for the React application.

- **/scripts/**: Contains scripts for development tasks.
  - `dev-server.ts`: A simple Node.js server that runs the Hono API for local development.
  - `seed.ts`: A script to run the database seeding process.

- `drizzle.config.ts`: Configuration file for Drizzle Kit (the migration tool).
- `vite.config.ts`: Configuration file for Vite (the frontend build tool).

---
### 2. Environment Setup
---

The application requires environment variables for the database connection and the Google Gemini API key.

1.  **Create the `.env` file:**
    Copy the example file to create your local configuration:
    ```bash
    cp .env.example .env
    ```

2.  **Configure Variables:**
    Open the newly created `.env` file and fill in the values:

    - `POSTGRES_URL`: This is the connection string for your Neon (or any other Postgres) database.
      **Important:** Use the non-pooling connection string for compatibility with Drizzle Kit. The `drizzle.config.ts` file automatically cleans the URL for you.
      Example: `postgres://user:password@host.neon.tech/dbname?sslmode=require`

    - `API_KEY`: Your API key for the Google Gemini API, obtained from Google AI Studio.

---
### 3. Key `package.json` Scripts
---

- **`npm run dev`**:
  This is the main command for local development. It's a compound command that does the following in order:
  1. `npm run db:push`: Pushes your `db/schema.ts` to the database, ensuring it's up to date.
  2. `npm run db:seed`: Runs the seeding script to populate the database if it's empty.
  3. `concurrently ...`: Starts both the API server (`npm:dev:api`) and the Vite frontend server (`npm:dev:vite`) at the same time. The `wait-on` command ensures Vite only starts after the API server is ready.

- **`npm run db:push`**:
  Connects to your database and synchronizes its schema to match what's defined in `db/schema.ts`. Run this manually if you change the schema while the dev server is already running.

- **`npm run db:seed`**:
  Runs the `scripts/seed.ts` file, which populates an empty database with the initial data from `api/seedData.ts`.

- **`npm run db:studio`**:
  Launches Drizzle Studio, a web-based GUI that allows you to browse and edit your database content directly.

---
### 4. Local Development Workflow
---

1.  **Installation:**
    Run `npm install` to install all required dependencies.

2.  **Environment Setup:**
    Create and configure your `.env` file as described in section 2.

3.  **Start the Application:**
    Run `npm run dev`.

    - The Hono API will start on `http://localhost:8787`.
    - The Vite frontend will start on `http://localhost:5173`.

4.  **Access the App:**
    Open `http://localhost:5173` in your browser. The application is now running. On the first run, the database will be automatically seeded, and you can log in using one of the demo user accounts defined in `api/seedData.ts`.
