
AetherSchedule - Documentation: Key Features Walkthrough
=========================================================

This document provides a step-by-step walkthrough of the primary user workflows in AetherSchedule, explaining how different features connect to form a cohesive experience.

---
### Workflow 1: Initial System Setup
---

**Role:** SuperAdmin or Timetable Manager

1.  **Configure Settings (`Settings` Page):**
    - **Timetable Structure**: Define the academic day by setting the college start/end times, period duration, working days, and breaks. The `generateTimeSlots` utility uses this information to create the time slots used throughout the entire application.
    - **AI Constraint Weights**: Tune the soft constraint weights to align the AI's priorities with the institution's goals (e.g., prioritize faculty satisfaction by increasing the `facultyGapWeight`).

2.  **Input Foundational Data (`Data Management` Page):**
    - The user populates the system with the core entities in a logical order:
      1. **Departments**: Create departments like "Computer Science." This automatically creates a "DepartmentHead" user account.
      2. **Subjects**: Define all courses, their types (Theory/Lab), and hours per week.
      3. **Rooms**: Define all available rooms with their capacity and type.
      4. **Faculty**: Create faculty profiles and link them to the subjects they are qualified to teach. This automatically creates a "Faculty" user account for each person.
      5. **Batches**: Create student batches, assign them to a department, define their curriculum (`subjectIds`), and optionally allocate specific rooms. This also creates a "Student Rep" user account.

3.  **Define Constraints (`Constraints` Page):**
    - **Faculty Availability**: For each faculty member, the user can click and drag on a grid to mark preferred or unavailable times. This data is used by both the AI engine (as a soft constraint) and the conflict checker.
    - **Pinned Assignments**: Create fixed, non-negotiable events (like a special workshop) that the AI must schedule around. These are treated as immutable objects by the scheduling engine.

---
### Workflow 2: Generating a New Timetable
---

**Role:** Timetable Manager or Department Head

1.  **Navigate to the `Scheduler` Page.**

2.  **Select Batches**: The user clicks the "Select Batches" button, which opens a modal (`BatchSelectorModal`). They select the batches they want to include in the master schedule.

3.  **(Optional) Pre-flight Diagnostics**: The user can click a button (not shown in current UI, but backend exists) to run `runPreflightDiagnostics`. This checks the data for the selected batches and warns of any issues (e.g., "Subject BCS301 has no qualified faculty") that would make scheduling impossible.

4.  **Generate Candidates**: The user clicks "Generate New."
    - This triggers the `handleGenerate` function, which calls the `/api/scheduler` endpoint.
    - The **`AIEngineConsole`** appears, showing a real-time log of the AI's thought process (e.g., "Evolving the best drafts...").
    - The backend runs the full `runOptimization` process.
    - The top 5 unique, high-scoring timetable candidates are returned to the frontend.

5.  **Review and Compare Candidates**:
    - The new candidates appear in the left-hand panel. The user can click "View" on any candidate to see its full timetable grid.
    - The user can select two candidates and click **"Compare with AI"**. This opens the `AIComparisonModal`, which displays a Gemini-generated qualitative analysis of the pros and cons of each option.

6.  **Save a Draft**: Once a preferred candidate is identified, the user clicks "Save." This stores the timetable in the database with a `Draft` status and a new version number.

---
### Workflow 3: Refining and Approving a Timetable
---

**Role:** Timetable Manager, Department Head

1.  **Select a Saved Version**: From the "Saved Versions" list on the `Scheduler` page, the user clicks on a `Draft` version to load it into the main view.

2.  **Manual Refinement**:
    - **Drag and Drop**: The user can drag any class from one slot to another. The `handleDropAssignment` function updates the state.
    - **Conflict Highlighting**: After every change, the `ConflictChecker` logic is run. If the change creates a conflict (e.g., a faculty double-booking), the class cell is highlighted with a red border and an icon with a detailed tooltip.
    - **Undo/Redo**: All manual changes can be undone or redone using the dedicated buttons, thanks to the `useUndoRedo` hook.

3.  **AI-Assisted Refinement (`AICommandBar`)**:
    - The user can type a command like "Swap DS Lab with COA for CS S5 A."
    - The `handleAICommand` function sends this to the backend, which uses Gemini to parse it and return a modified grid.
    - The frontend displays a summary of the AI's proposed change (e.g., "Swap BCS351 with BCS302.") which the user can then "Apply" or "Discard."

4.  **Save Changes**: After refinement, the user clicks "Save Changes" to update the `Draft` in the database.

5.  **Approval Workflow**:
    - **Submit**: A user (e.g., Department Head) clicks "Submit for Review." The timetable's status changes to `Submitted`.
    - **Review & Comment**: Another user with higher permissions (e.g., Timetable Manager) can view the submitted timetable. They can add comments.
    - **Approve/Reject**: The manager can then either "Approve" or "Reject" the timetable.
      - **On Approve**: The timetable's status becomes `Approved`. The system automatically finds any other `Approved` timetables for the same batches and changes their status to `Archived`, ensuring only one timetable is active at a time.

---
### Workflow 4: Viewing and Managing an Active Timetable
---

**Role:** All Roles

1.  **Personalized View (`My Timetable` Page)**:
    - A Student or Faculty member logs in and is taken directly to this page.
    - The system finds the active `Approved` timetable for their specific batch or faculty ID and displays only their personal schedule. All other classes are hidden.

2.  **Substitute Management (`Scheduler` Page)**:
    - A manager views an `Approved` timetable. The drag-and-drop functionality is now disabled.
    - They can click the "substitute" icon on a class. This opens the `SubstituteModal`.
    - The backend's `findRankedSubstitutes` logic is called. It returns a list of available, qualified faculty, ranked by an AI score.
    - The manager selects a substitute, a date range, and confirms. This creates a `Substitution` record in the `constraints` table.
    - Now, when a faculty member views their `My Timetable` page, the substituted class will appear on their schedule for the specified date range, and it will be removed from the original teacher's view for those dates.
