
AetherSchedule - Documentation: Database Schema
================================================

This document provides an overview of the database schema for AetherSchedule, defined using Drizzle ORM in `db/schema.ts`.

---
### 1. ORM and Configuration
---

- **ORM**: Drizzle ORM is used for its type-safety, performance, and SQL-like query builder. The schema is defined once in TypeScript (`db/schema.ts`) and serves as the single source of truth.
- **Database**: The schema is designed for PostgreSQL and is deployed on Neon, a serverless Postgres provider.
- **Migrations**: `drizzle-kit` is the command-line tool used to manage schema migrations. The `drizzle.config.ts` file configures the connection for this tool. The `npm run db:push` command directly synchronizes the schema, which is suitable for development.

---
### 2. Core Data Tables
---

These tables store the fundamental entities of the academic institution.

- **`departments`**: Stores academic departments (e.g., Computer Science & Engineering).
  - `id`: Primary Key (string).
  - `name`, `code`: The full name and short code of the department.

- **`subjects`**: Stores all courses offered.
  - `id`, `name`, `code`: Basic identifiers.
  - `type`: 'Theory', 'Practical', or 'Workshop'. This is critical for the engine to match classes with appropriate rooms.
  - `hoursPerWeek`: The number of 1-hour slots this subject requires per week for a batch.

- **`faculty`**: Stores all teaching staff.
  - `id`, `name`: Basic identifiers.
  - `subjectIds`: A `jsonb` array of subject IDs this faculty member is qualified to teach.
  - `userId`: A foreign key linking to the `users` table for their login account.

- **`rooms`**: Stores all physical rooms.
  - `id`, `name`: Basic identifiers.
  - `capacity`: Student capacity of the room.
  - `type`: 'Lecture Hall', 'Lab', or 'Workshop'. Used to match with `subjects.type`.

- **`batches`**: Stores groups of students (e.g., CS Semester 3 Section A).
  - `id`, `name`, `semester`, `studentCount`: Basic identifiers.
  - `departmentId`: Foreign key to `departments`.
  - `subjectIds`: A `jsonb` array of subject IDs that make up this batch's curriculum.
  - `allocatedRoomIds`: An optional `jsonb` array. If set, the AI will ONLY use these rooms for this batch.

- **`users`**: Stores login accounts for all roles.
  - `id`, `name`, `email`: Basic user info.
  - `role`: An enum ('SuperAdmin', 'Faculty', 'Student', etc.) defining their permissions.
  - `batchId`, `facultyId`, `departmentId`: Foreign keys that link a user account to its corresponding entity.

---
### 3. Linking and Transactional Tables
---

These tables connect the core entities and store transactional data.

- **`faculty_allocations`**: A crucial link table that defines specific teaching assignments.
  - **Purpose**: While the `faculty` table lists who *can* teach a subject, this table specifies who *is assigned* to teach a subject for a specific batch. It also supports assigning multiple teachers to a single class (e.g., for labs).
  - `batchId`, `subjectId`, `facultyIds` (`jsonb` array): The core relationship.

- **`generated_timetables`**: Stores every generated timetable, candidate, and approved version.
  - `id`: Primary key.
  - `batchIds`: A `jsonb` array of batch IDs included in this timetable.
  - `status`: The current state in the workflow ('Draft', 'Submitted', 'Approved', etc.).
  - `timetable`: A `jsonb` column that stores the entire timetable grid structure. This is the main data payload.
  - `metrics`: A `jsonb` object storing the calculated scores for the timetable (student gaps, etc.).
  - `analytics`: A `jsonb` object that caches the full analytics report once generated.
  - `comments`: A `jsonb` array for storing the review and feedback history.

- **`timetable_feedback`**: Stores ratings and comments submitted by faculty on their schedules. This data can be used by the Gemini AI to tune future optimizations.

---
### 4. Configuration and Constraint Tables
---

These tables are "singletons" (intended to have only one row) that store global application settings and constraints.

- **`constraints`**: Stores all user-defined scheduling constraints.
  - `id`: The primary key is a simple integer (always `1`).
  - `pinnedAssignments`: `jsonb` array for fixed, unmovable classes.
  - `plannedLeaves`: `jsonb` array for faculty holidays.
  - `facultyAvailability`: `jsonb` array defining preferred/unavailable slots for faculty.
  - `substitutions`: `jsonb` array for active teacher substitutions.

- **`global_constraints`**: Stores the weights for the AI's fitness function.
  - `id`: Primary key (always `1`).
  - `studentGapWeight`, `facultyGapWeight`, etc.: Numeric values that determine the penalty for each type of "soft" constraint violation. Higher values mean the AI will try harder to avoid them.

- **`timetable_settings`**: Stores the fundamental structure of the academic schedule.
  - `id`: Primary key (always `1`).
  - `collegeStartTime`, `collegeEndTime`: Defines the working hours.
  - `periodDuration`: The length of a single class slot in minutes.
  - `breaks`: A `jsonb` array defining lunch or other breaks.
  - `workingDays`: A `jsonb` array of day indices (0=Mon, 1=Tue, etc.).
  The `generateTimeSlots` utility function uses this entire record to dynamically calculate the list of available time slots for the day.
